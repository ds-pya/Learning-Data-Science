fun extractNamedEntities(
    decodedScore: IntArray,                  // 길이: 실제 토큰 수 (ex. 512 중 active만)
    attentionMask: LongArray,                // 길이 512
    specialTokensMask: LongArray,            // 길이 512
    offsets: List<Pair<Int, Int>>,           // 길이 512, 이미 byte → char 변환된 상태
    text: String
): List<Pair<String, String>> {

    // 라벨 매핑 (0~8)
    val labelMap = listOf(
        "O", "B-PER", "I-PER", "B-ORG", "I-ORG",
        "B-LOC", "I-LOC", "B-MISC", "I-MISC"
    )

    val result = mutableListOf<Pair<String, String>>()

    // 실제 토큰 인덱스만 추출
    val realTokenIndices = (0 until 512).filter {
        attentionMask[it] == 1L && specialTokensMask[it] == 0L
    }

    // 해당 인덱스에 대한 offset 정렬
    val effectiveOffsets = realTokenIndices.map { offsets[it] }

    var currentEntity: StringBuilder? = null
    var currentType: String? = null
    var currentStart: Int? = null

    for (i in decodedScore.indices) {
        val labelIdx = decodedScore[i]
        val label = labelMap.getOrElse(labelIdx) { "O" }
        val (start, end) = effectiveOffsets[i]

        if (label == "O" || start >= end || end > text.length) {
            // 엔티티 종료
            if (currentEntity != null && currentType != null && currentStart != null) {
                result.add(currentType to text.substring(currentStart, start))
                currentEntity = null
                currentType = null
                currentStart = null
            }
            continue
        }

        val (tag, entityType) = label.split("-").let {
            if (it.size == 2) it[0] to it[1] else "O" to ""
        }

        when (tag) {
            "B" -> {
                // 기존 엔티티 종료
                if (currentEntity != null && currentType != null && currentStart != null) {
                    result.add(currentType to currentEntity.toString())
                }
                currentEntity = StringBuilder(text.substring(start, end))
                currentType = entityType
                currentStart = start
            }

            "I" -> {
                if (currentEntity != null && currentType == entityType) {
                    currentEntity.append(text.substring(start, end))
                } else {
                    // I단독: 새로 시작
                    currentEntity = StringBuilder(text.substring(start, end))
                    currentType = entityType
                    currentStart = start
                }
            }
        }
    }

    // 루프 끝났을 때 마지막 엔티티 처리
    if (currentEntity != null && currentType != null && currentStart != null) {
        result.add(currentType to currentEntity.toString())
    }

    return result
}