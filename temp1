import streamlit as st
import pandas as pd
import time

# 샘플 데이터
data = pd.DataFrame({"A": range(1, 101), "B": range(101, 201)})

# 세션 상태 초기화 (첫 실행 시)
if "processed_data" not in st.session_state:
    st.session_state.processed_data = pd.DataFrame(columns=["A", "B", "Result"])
if "progress" not in st.session_state:
    st.session_state.progress = 0

# UI 요소
st.title("Streamlit 실시간 데이터 처리")
st.write("버튼을 누르면 데이터가 청크 단위로 처리됩니다.")

# 처리 시작 버튼
if st.button("처리 시작"):
    st.session_state.processed_data = pd.DataFrame(columns=["A", "B", "Result"])  # 초기화
    st.session_state.progress = 0

    progress_bar = st.progress(0)  # 진행률 바
    total_chunks = 10  # 몇 번의 반복으로 처리할 것인지 설정
    chunk_size = len(data) // total_chunks  # 한 번에 처리할 데이터 개수

    for i in range(total_chunks):
        start_idx = i * chunk_size
        end_idx = start_idx + chunk_size
        chunk = data.iloc[start_idx:end_idx].copy()

        # 간단한 가공 예시 (두 컬럼을 더한 값 추가)
        chunk["Result"] = chunk["A"] + chunk["B"]

        # 세션 상태에 결과 누적
        st.session_state.processed_data = pd.concat(
            [st.session_state.processed_data, chunk], ignore_index=True
        )

        # 진행률 업데이트
        st.session_state.progress = (i + 1) / total_chunks
        progress_bar.progress(st.session_state.progress)

        # 데이터프레임 업데이트
        st.dataframe(st.session_state.processed_data)

        time.sleep(0.5)  # 처리 지연을 위한 sleep (실제 작업 시 필요 없음)

    st.success("처리 완료!")

# 결과 표시
st.subheader("처리 결과")
st.dataframe(st.session_state.processed_data)